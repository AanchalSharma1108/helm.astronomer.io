################################
## Fluentd ConfigMap
#################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  labels:
    tier: logging
    component: {{ template "name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
data:
  system.conf: |-
    <system>
      root_dir /tmp/fluentd-buffers/
    </system>
  containers.input.conf: |-
    # Grab logs from hosts
    <source>
      @id fluentd-containers.log
      @type tail
      path /var/log/containers/*.log
      pos_file "/var/log/#{ENV['RELEASE']}-fluentd-containers.log.pos"
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag raw.kubernetes.*
      format json
      read_from_head true
    </source>
    # Detect exceptions in the log output and forward them as one log entry.
    <match raw.kubernetes.**>
      @id raw.kubernetes
      @type detect_exceptions
      remove_tag_prefix raw
      message log
      stream stream
      multiline_flush_interval 5
      max_bytes 500000
      max_lines 1000
    </match>
  forward.input.conf: |-
    # Takes the messages sent over TCP
    <source>
      @type forward
    </source>
  monitoring.conf: |-
    # Prometheus Exporter Plugin
    # input plugin that exports metrics
    <source>
      @type prometheus
    </source>
    <source>
      @type monitor_agent
    </source>
    # input plugin that collects metrics from MonitorAgent
    <source>
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>
    # input plugin that collects metrics for output plugin
    <source>
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>
    # input plugin that collects metrics for in_tail plugin
    <source>
      @type prometheus_tail_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>
  output.conf: |
    # Enriches records with Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>

    # Filter down by namespace and component (scheduler/webserver)
    <filter kubernetes.**>
      @type grep
      <regexp>
        key $.kubernetes.namespace_name
        pattern "^#{ENV['NAMESPACE']}-.*$"
      </regexp>
      <regexp>
        key $.kubernetes.labels.component
        pattern ^(scheduler|webserver)$
      </regexp>
    </filter>

    # Drop unncessesary fields and rename some fields
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      renew_record
      <record>
        component ${record["kubernetes"]["labels"]["component"]}
        workspace ${record["kubernetes"]["labels"]["workspace"]}
        release ${record["kubernetes"]["labels"]["release"]}
        log ${record["log"]}
      </record>
    </filter>

    # Send off to elasticsearch
    <match kubernetes.**>
      @id elasticsearch
      @type elasticsearch_dynamic
      @log_level info
      include_timestamp true
      host "#{ENV['OUTPUT_HOST']}"
      port "#{ENV['OUTPUT_PORT']}"
      index_name fluentd.${record["release"]}.${Time.at(time).getutc.strftime(@logstash_dateformat)}
      <buffer>
        @type file
        path "/var/log/fluentd-buffers/#{ENV['RELEASE']}-kubernetes.system.buffer"
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size "#{ENV['OUTPUT_BUFFER_CHUNK_LIMIT']}"
        queue_limit_length "#{ENV['OUTPUT_BUFFER_QUEUE_LIMIT']}"
        overflow_action block
      </buffer>
    </match>
