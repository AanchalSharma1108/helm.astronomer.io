################################
## Prometheus StatefulSet
#################################
kind: StatefulSet
apiVersion: apps/v1beta2
metadata:
  name: "{{ .Release.Name }}-prometheus"
  labels:
    tier: monitoring
    component: prometheus
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: monitoring
      component: prometheus
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        tier: monitoring
        component: prometheus
        release: {{ .Release.Name }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/prometheus-configmap.yaml") . | sha256sum }}
    spec:
      restartPolicy: Always
      serviceAccountName: "{{ .Release.Name }}-prometheus"
      initContainers:
        - name: "{{ .Release.Name }}-prometheus-init"
          image: {{ include "init_image" . }}
          imagePullPolicy: {{ .Values.images.init.pullPolicy }}
          command: ["chown", "-R", "65534:65534", "{{ .Values.dataDir }}"]
          volumeMounts:
            - name: prometheus-data-volume
              mountPath: "{{ .Values.dataDir }}"
      containers:
        - name: "{{ .Release.Name }}-prometheus"
          image: {{ include "prometheus_image" . }}
          imagePullPolicy: {{ .Values.images.prometheus.pullPolicy }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          args:
            - "--config.file=/etc/prometheus/config/prometheus.yaml"
            - "--storage.tsdb.path={{ .Values.dataDir }}"
            - "--storage.tsdb.retention={{ .Values.retention }}"
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/config
            - name: prometheus-data-volume
              mountPath: "{{ .Values.dataDir }}"
          ports:
            - name: prometheus-data
              containerPort: {{ .Values.ports.http }}
          livenessProbe:
            httpGet:
              path: /graph
              port: {{ .Values.ports.http }}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /graph
              port: {{ .Values.ports.http }}
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: "{{ .Release.Name }}-prometheus"
            items:
              - key: prometheus.yaml
                path: prometheus.yaml
  {{- if not .Values.persistence.enabled }}
        - name: prometheus-data-volume
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: prometheus-data-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
      {{- if .Values.persistence.storageClassName }}
        storageClassName: {{ .Values.persistence.storageClassName }}
      {{- end }}
  {{- end }}
